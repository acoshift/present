Dispatcher

Thanatat Tamtan

acoshift@gmail.com
https://github.com/acoshift

* ‡∏õ‡∏±‡∏ç‡∏´‡∏≤

* ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test ‡πÑ‡∏´‡∏°

- Timeline ‡∏™‡∏±‡πâ‡∏ô
- Team ‡πÄ‡∏•‡πá‡∏Å (1-2 ‡∏Ñ‡∏ô)
- ‡∏ó‡∏≥ MVP ‡πÑ‡∏õ‡∏•‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô feature ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ

* ‡∏û‡∏≠‡∏°‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á

- ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥ interface ‡πÑ‡∏ß‡πâ mock ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
- interface ‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å mock ‡πÑ‡∏°‡πà‡πÑ‡∏´‡∏ß (‡∏á‡∏≤‡∏ô‡∏ñ‡∏∂‡∏Å+‡∏ó‡∏µ‡∏°‡πÄ‡∏•‡πá‡∏Å+‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ feature ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô = ‡∏Ç‡∏µ‡πâ‡πÄ‡∏Å‡∏µ‡∏¢‡∏à)
- ‡πÅ‡∏Å‡πâ code ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡∏Å‡∏•‡∏±‡∏ß‡∏û‡∏±‡∏á

* ‡∏•‡∏≠‡∏á‡∏î‡∏π function ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ

.code getuser.go /^func Get/,/^}/

* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ mock ‡πÑ‡∏î‡πâ

.code mockgetuser.go /START OMIT/,/END OMIT/

* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ mock ‡πÑ‡∏î‡πâ ‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ ‡∏≠‡∏±‡∏ô

.code mockgetuser2.go /START OMIT/,/END OMIT/

* ‡∏•‡∏≠‡∏á mock ‡∏´‡∏ô‡πà‡∏≠‡∏¢

.code mockgetuser3.go /START OMIT/,/END OMIT/

* ‡∏´‡∏£‡∏∑‡∏≠ mock ‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡∏î‡∏µ ?

.code mockgetuser4.go /START OMIT/,/END OMIT/

‡∏ã‡∏∂‡πà‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å

* ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Test ‡πÑ‡∏´‡∏°

* ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡∏¢‡∏±‡∏á‡πÑ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô code ‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏ó‡∏™‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á ‡πÇ‡∏î‡∏¢‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ code ‡πÅ‡∏Ñ‡πà 0 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ?

* =======> Reflect üò≥

* ‡∏à‡∏≤‡∏Å function ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡πâ

.code refgetuser1.go /START OMIT/,/END OMIT/

‡πÅ‡∏Å‡πâ‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢

.code refgetuser2.go /START OMIT/,/END OMIT/

* ‡πÅ‡∏Å‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô

.code refgetuser3.go /START OMIT/,/END OMIT/

* ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ

	func(context.Context, ANY) error

‡∏Ç‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏ß‡πà‡∏≤

	type Handler interface{}

* ‡∏Ñ‡∏∏‡πâ‡∏ô ‡πÜ ‡πÑ‡∏´‡∏° ?

	http.Handler

* ‡∏•‡∏≠‡∏á‡∏î‡∏π http.ServeMux

map[string]http.Handler

Path => Handler

* ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ó‡∏≥ Mux ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ ‡πÜ ‡∏Å‡∏±‡∏ô

map[string]Handler

Param Type Name => Handler

* ‡∏î‡∏∂‡∏á Type Name

	func reflectTypeName(r reflect.Type) string {
		pkg := r.PkgPath()
		name := r.Name()
		if pkg == "" {
			return name
		}
		return pkg + "." + name
	}

‡∏î‡∏∂‡∏á Type Name ‡∏à‡∏≤‡∏Å Handler

	func NameFromHandler(h Handler) string {
		return reflectTypeName(reflect.TypeOf(h).In(1).Elem())
	}

* ‡∏™‡∏£‡πâ‡∏≤‡∏á Mux ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á

	type Mux struct {
		handler map[string]Handler
	}

	func (d *Mux) Register(h Handler) {
		if d.handler == nil {
			d.handler = make(map[string]Handler)
		}

		k := NameFromHandler(h)
		d.handler[k] = h
	}

* ‡∏™‡∏£‡πâ‡∏≤‡∏á function ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ ‡πÜ ServeHTTP ‡∏Ç‡∏≠‡∏á http.ServeMux

	func (d *Mux) Dispatch(ctx context.Context, msg interface{}) error {
		k := reflectTypeNamereflect.TypeOf(msg).Elem())

		h := d.handler[k]
		if h == nil {
			return ErrNotFound
		}

		err := reflect.ValueOf(h).Call([]reflect.Value{
			reflect.ValueOf(ctx),
			reflect.ValueOf(msg),
		})[0].Interface()
		if err != nil {
			return err.(error)
		}
		return nil
	}

* ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π code ‡∏à‡∏≤‡∏Å

.link https://github.com/moonrhythm/dispatcher

* ‡πÉ‡∏ä‡πâ ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ

.play usage.go /START OMIT/,/END OMIT/

* mock ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ

.play usagemock.go /START OMIT/,/END OMIT/

* debug ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ

.play usagedebug.go /START OMIT/,/END OMIT/

* cache ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ

.play usagecache.go /START OMIT/,/END OMIT/

* API ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ

.play usageapi.go /START OMIT/,/END OMIT/
