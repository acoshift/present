Backend {Hard Way}
https://github.com/acoshift/backend-hardway

Thanatat Tamtan

Software Magician
acoshift@gmail.com
https://acoshift.me
@acoshift

* OSI model

- Open Systems Interconnection model
- characterizes and standardizes the communication functions of a telecommunication or computing system

* OSI layers

- Layer 1: Physical Layer
- Layer 2: Data Link Layer
- Layer 3: Network Layer
- Layer 4: Transport Layer
- Layer 5: Session Layer
- Layer 6: Presentation Layer
- Layer 7: Application Layer

* Layer 1: Physical Layer

- Unit: Bit
- Example: Network Adapter, Repeater, Modems

* Layer 2: Data Link Layer

- Unit: Frame
- Example: IEEE 802 (802.3 Ethernet, 802.11 WiFi)

* Layer 3: Network Layer

- Unit: Packet
- Function: addressing, routing, traffic control

* Layer 4: Transport Layer

- Unit: Segment (TCP) / Datagram (UDP)
- Function: Segmentation, Acknowledgement, Multiplexing

* Layer 5: Session Layer

- Unit: Data
- Function: Managing community session (establishes, manages and terminates connection)

* Layer 6: Presentation Layer

- Unit: Data
- Function: Encoding, Compression, Encryption/Descyption

* Layer 7: Application Layer

- Unit: Data
- Function: High-level API

* Internet Layering

.image internet_layering.svg

* Protocol

- rules that allow two or more entities to transmit information
- syntax, semantics and synchronization of communication and possible error recovery methods

* TCP (Transmission Control Protocol)

.image tcp_state_diagram.svg _ 750

* Workshop #1

- TCP Server

* HTTP (Hypertext Transfer Protocol)

- Version 0.9: 1991
- Version 1.0: 1996
- Version 1.1: 1997
- Version 2.0: 2015

* HTTP Request

    {METHOD} {PATH} HTTP/{VERSION}
    {HEADERS}

    {BODY}

Example

    GET / HTTP/1.1
    Host: localhost:8000
    Accept: */*

* HTTP Response

    HTTP/{VERSION} {STATUS} {STATUS TEXT}
    {HEADERS}

    {BODY}

Example

    HTTP/1.1 200 OK
    Date: Thu, 05 Oct 2017 06:22:24 GMT
    Content-Length: 5
    Content-Type: text/plain; charset=utf-8

    Hello

* HTTP Request Methods

.image http_request_methods.png _ 1000

* HTTP Request Methods

.image http_request_method_case.png _ 950

* HTTP Status Code

- 1xx: Informational
- 2xx: Successful
- 3xx: Redirection
- 4xx: Client Error
- 5xx: Server Error

* 1×× Informational

- 100 Continue
- 101 Switching Protocols
- 102 Processing

* 2×× Success
- *200* OK
- *201* Created
- *202* Accepted
- 203 Non-authoritative Information
- *204* No Content
- 205 Reset Content
- 206 Partial Content
- 207 Multi-Status
- 208 Already Reported
- 226 IM Used

* 3×× Redirection

- 300 Multiple Choices
- *301* Moved Permanently
- *302* Found
- *303* See Other
- *304* Not Modified
- 305 Use Proxy
- 307 Temporary Redirect
- 308 Permanent Redirect

* 4×× Client Error

- *400* Bad Request
- *401* Unauthorized
- 402 Payment Required
- *403* Forbidden
- *404* Not Found
- *405* Method Not Allowed
- 406 Not Acceptable
- 407 Proxy Authentication Required
- 408 Request Timeout
- 409 Conflict
- 410 Gone
- 411 Length Required

* 4×× Client Error

- 412 Precondition Failed
- *413* Payload Too Large
- 414 Request-URI Too Long
- 415 Unsupported Media Type
- 416 Requested Range Not Satisfiable
- 417 Expectation Failed
- 418 I'm a teapot
- 421 Misdirected Request
- 422 Unprocessable Entity
- 423 Locked
- 424 Failed Dependency
- 426 Upgrade Required

* 4×× Client Error

- 428 Precondition Required
- *429* Too Many Requests
- 431 Request Header Fields Too Large
- 444 Connection Closed Without Response
- 451 Unavailable For Legal Reasons
- *499* Client Closed Request

* 5×× Server Error
- *500* Internal Server Error
- *501* Not Implemented
- *502* Bad Gateway
- *503* Service Unavailable
- *504* Gateway Timeout
- 505 HTTP Version Not Supported
- 506 Variant Also Negotiates
- 507 Insufficient Storage
- 508 Loop Detected
- 510 Not Extended
- 511 Network Authentication Required
- 599 Network Connect Timeout Error

* Workshop #2

- TCP HTTP Server

* Function

Params => Function => Result

.code function.go

* Handler

Request => Handler => Response

.code handler.go

.code handler-func.go

.image handler.png

* Request

.code request.go

* ResponseWriter

.code responseWriter.go

    HTTP/{VERSION} {STATUS} {STATUS TEXT}
    {HEADERS}
        # header can write only once
    {BODY}

* Workshop #3

- TCP HTTP Server with Handler

* Workshop #4

- TCP HTTP Server with net/http Handler

* Workshop #5

- HTTP Server using net/http

* Router/Multiplexer

.image router.png 500 _

* Workshop #6

- Basic Router

* Workshop #7

- Router with slice

* Workshop #8

- Router with map

* Workshop #9

- net/http Multiplexer

* Workshop #10

- net/http Default Multiplexer

* Middleware

.image handler.png 150 _

.image middleware.png 150 _

* Workshop #11

- Middleware

* Logging

    {
        "time": "2017-10-20T15:05:04.21702Z",
        "remote_ip": "127.0.0.1:54084",
        "host": "localhost:3333",
        "method": "GET",
        "uri": "/",
        "status": 200,
        "latency": 35265,
        "latency_human": "35.265µs",
        "bytes_in": 0,
        "bytes_out": 5
    }

* Workshop #12

- Logging Middleware

* Chain Middlewares

.image chain-middleware.png 160 _

.code chain-middleware.go

* Chain Middlewares

.code chain-middleware-func.go

* Workshop #13-#14

- Chain middlewares
- Create new middleware from multiple middlewares

* HTTP Request Body

    {METHOD} {PATH} HTTP/{VERSION}
    {HEADERS}

    {BODY}

Example

    POST / HTTP/1.1
    Host: localhost:8000
    Accept: */*
    Content-Type: text/plain; charset=utf-8

    Hello

* Workshop #15

- Body Binary

* URL Encoded

*application/x-www-form-urlencoded*

    POST / HTTP/1.1
    Host: localhost:8000
    Accept: */*
    Content-Type: application/x-www-form-urlencoded; charset=utf-8

    username=test&password=hacker

* Workshop #16

- Body URL Encoded

* Form Data

*multipart/form-data*

    POST / HTTP/1.1
    Host: localhost:8000
    Accept: */*
    Content-Type: multipart/form-data; charset=utf-8; boundary=__X_BOUNDARY__

    --__X_BOUNDARY__
    Content-Disposition: form-data; name="username"

    test
    --__X_BOUNDARY__
    Content-Disposition: form-data; name="password"

    hacker
    --__X_BOUNDARY__--

* Workshop #17

- Body Form Data

* JSON

*application/json*

    POST / HTTP/1.1
    Host: localhost:8000
    Accept: */*
    Content-Type: application/json; charset=utf-8

    {"username":"test","password":"hacker"}

* Workshop #18

- Body JSON

* Body Limiter

.code body-limiter.go

* Workshop #19

- Body Limiter

* Workshop: Image Resizer

- POST binary image limit size to 2 MiB
- Response with jpeg 150x150 resolution image

* Workshop #20

- Image Resizer

* Testable Handler

.code testable-handler.go

* Workshop #21

- Testable Image Resizer

* Compression Middleware

- If *request* *DO* *NOT* contain "Accept-Encoding" header then *DO* *NOT* compress
- If *request* contains "Sec-WebSocket-Key" header then *DO* *NOT* compress
- If *response* contains "Content-Encoding" header then *DO* *NOT* compress
- If *response* *CAN* *NOT* compress (ex. jpeg, png) then *DO* *NOT* compress
- If *response* body's length less than 860 bytes, it's faster to send uncompress data
- Only use compress algorithm in "Accept-Encoding" header
- Add "Vary: Accept-Encoding" header to *response*
- Add "Content-Encoding: {compress algorithm}" header to *response*
- Delete "Content-Length" header (before compress) from *response*

* Workshop #22

- Compression middleware

* Object Pooling

    $ hey -H "Accept-Encoding: gzip" -n 100000 http://localhost:3333/large

- *Without* Pooling

    Total:          22.0684 secs
    Slowest:        0.1044 secs
    Fastest:        0.0003 secs
    Average:        0.0109 secs
    Requests/sec:   4531.3572

- *With* Pooling

    Total:          9.3985 secs
    Slowest:        0.1152 secs
    Fastest:        0.0002 secs
    Average:        0.0046 secs
    Requests/sec:   10640.0509


* Workshop #23

- Compression with Object Pooling

* Cross-Origin Resource Sharing (CORS)

.image cors_principle.png 500 _

* CORS Headers

P: Preflighted Request, R: Real Request

*Request*

- [P] Access-Control-Request-Method
- [P] Access-Control-Request-Headers

*Response*

- [P, R] Access-Control-Allow-Origin
- [P] Access-Control-Allow-Methods
- [P] Access-Control-Allow-Headers
- [P, R] Access-Control-Allow-Credentials
- [R] Access-Control-Expose-Headers
- [P] Access-Control-Max-Age

* CORS Note

- Access-Control-Allow-Origin: *
- Access-Control-Allow-Credentials: true
*CAN* *NOT* use together

* Preflighted Request

- Request

    OPTIONS /api/rocket HTTP/1.1
    Host: api.example.com
    Origin: http://example.com
    Access-Control-Request-Method: POST
    Access-Control-Request-Headers: Authorization, Content-Type

- Response

    HTTP/1.1 200 OK
    Date: Sat, 21 Oct 2017 11:20:51 GMT
    Access-Control-Allow-Headers: Authorization, Content-Type
    Access-Control-Allow-Methods: POST
    Access-Control-Allow-Origin: http://example.com
    Access-Control-Max-Age: 7200
    Vary: Origin
    Vary: Access-Control-Request-Method
    Vary: Access-Control-Request-Headers
    Content-Length: 0

* Real Request

- Request

    POST /api/rocket HTTP/1.1
    Host: api.example.com
    Origin: http://example.com
    Content-Type: application/json; charset=utf-8
    Content-Length: 23

    {"name":"launcher-123"}

- Response

    HTTP/1.1 201 Created
    Date: Sat, 21 Oct 2017 11:20:51 GMT
    Access-Control-Allow-Origin: http://example.com
    Content-Type: application/json; charset=utf-8
    Content-Length: 9

    {"id":17}

* Preflighted Request

- If Allow Credentials, Add
    Access-Control-Allow-Credentials: true
- Add
    Access-Control-Allow-Methods: {METHOD-1}, {METHOD-2}, ...
- Add
    Access-Control-Allow-Headers: {HEADER-1}, {HEADER-2}, ...
- If Max-Age > 0, Add
    Access-Control-Max-Age: {MAX-AGE in seconds}

* Preflighted Request

- If Allow All Origin and *NOT* Allow Credentials, Add
    Access-Control-Allow-Origin: *
- If Allow All Origin and Allow Credentials, *panic* to tell developer
- If *NOT* Allow All Origin and *Incoming* *Origin* is *ALLOW*, Add
    Access-Control-Allow-Origin: {Incoming Origin}
    Vary: Origin
    Vary: Access-Control-Request-Method
    Vary: Access-Control-Request-Headers
- If *NOT* Allow All Origin and *Incoming* *Origin* is *DENY*, response with forbidden

* Real Request

- If Allow Credentials, Add
    Access-Control-Allow-Credentials: true
- If Expose Headers, Add
    Access-Control-Expose-Headers: {HEADER-1}, {HEADER-2}, ...
- If Allow All Origin and *NOT* Allow Credentials, Add
    Access-Control-Allow-Origin: *
- If *NOT* Allow All Origin and *Incoming* *Origin* is *ALLOW*, Add
    Access-Control-Allow-Origin: {Incoming Origin}
    Vary: Origin
- If *NOT* Allow All Origin and *Incoming* *Origin* is *DENY*, response with forbidden

* Workshop #24

- CORS

* Health Check

- To tell when ready to accept incoming request
- To tell when to restart
- To tell what went wrong
- *MUST* fast, low resource (ex. call every 10 seconds)

*Success*

- Response with status 200 OK

*Failure*

- Response with status 500 Internal Server Error

* Graceful Shutdown

- Send SIGTERM to process (http server)
- HTTP Server stops receive new request
- Wait (with deadline) until all pending requests finish
- Shutdown Server

* Graceful Shutdown

.code graceful-shutdown.go

* Workshop #25

- Graceful Shutdown

* Authentication

- Cookie-based Authentication
- Token-based Authentication
- Signature-based Authentication

* Cookie

*Response*

    Set-Cookie: <name>=<value>; <d-1>; <d-2>; ...

*Directives*

- Expires=<date>
- Max-Age=<seconds>
- Domain=<domain>
- Path=<path>
- Secure
- HttpOnly
- SameSite=Strict
- SameSite=Lax

* Cookie

- Session cookie

    Set-Cookie: session=wK8VfUWfF9R; Secure; HttpOnly; Path=/

- Permanent cookie

    Set-Cookie: session=wK8VfUWfF9R; Secure; HttpOnly; Path=/; Max-Age=3600
    Set-Cookie: session=wK8VfUWfF9R; Secure; HttpOnly; Path=/; Expires=Mon, 15 Jan 2018 08:00:00 GMT

* Workshop #26

- Cookie

* Session

OWASP - Session Management Cheat Sheet

* Session ID Name Fingerprinting

The name used by the session ID should not be extremely descriptive nor offer unnecessary details about the purpose and meaning of the ID.

- PHPSESSID (PHP)
- JSESSIONID (J2EE)
- ASP.NET_SessionId (ASP.NET)

It is recommended to change the default session ID name of the web development framework to a generic name, such as "id".

* Session ID Length

The session ID must be long enough to prevent brute force attacks, where an attacker can go through the whole range of ID values and verify the existence of valid sessions.

The session ID length must be at least *128* *bits* (16 bytes).

* Session ID Entropy

The session ID must be unpredictable (random enough) to prevent guessing attacks.

* Session ID Content (or Value)

The session ID content (or value) must be meaningless to prevent information disclosure attacks.

The session ID must simply be an identifier on the client side, and its value must never include sensitive information.

* Accepted Session ID Exchange Mechanisms

If a user submits a session ID through a different exchange mechanism, such as a URL parameter, the web application should avoid accepting it as part of a defensive strategy to stop *session* *fixation*.

* Session Expiration

*Automatic*

- Idle Timeout
- Absolute Timeout
- Renewal Timeout

*Manual*

- Logout Button !!!

* Workshop #27

- Session

* Workshop #28

- Session without Fixation

* HTTP Strict Transport Security (HSTS)

is a web security policy mechanism which helps to protect websites against protocol downgrade attacks and cookie hijacking.

    Strict-Transport-Security: max-age=<expire-time>

*Directives*

- includeSubDomains
- preload

    Strict-Transport-Security: max-age=63072000; includeSubDomains; preload

https://hstspreload.org

* Cross-Site Request Forgery (CSRF)

is a type of attack that occurs when a malicious web site, email, blog, instant message, or program causes a user’s web browser to perform an unwanted action on a trusted site for which the user is currently authenticated.

* CSRF Defence

- Check standard headers to verify the request is same origin
- *AND* Check CSRF token

* Verifying Same Origin with Standard Headers

- Determining the origin the request is coming from (source origin)
- Determining the origin the request is going to (target origin)

* Identifying Source Origin

- Origin Header
- Referer Header

If neither of these headers is present, which should be VERY rare, you can either accept or block the request. *We* *recommend* *blocking*.

Identifying the Target Origin

- Host
- X-Forwarded-Host (behide proxy)

* CSRF Specific Defense

- Synchronizer (CSRF) Tokens
- Double Cookie Defense
- Encrypted Token Pattern
- Custom Header - e.g., X-Requested-With: XMLHttpRequest

* Synchronizer (CSRF) Tokens

- Any state changing operation requires a secure random token to prevent CSRF attacks
- Unique per user session
- Large random value
- Generated by a cryptographically secure random number generator
- The CSRF token is added as a hidden field for forms or within the URL
- The server rejects the requested action if the CSRF token fails validation

* Double Submit Cookie

is defined as sending a random value in both a cookie and as a request parameter, with the server verifying if the cookie value and request value match.

When a user authenticates to a site, the site should generate a (cryptographically strong) pseudorandom value and set it as a cookie on the user's machine separate from the session id.

The site then requires that every transaction request include this random value as a hidden form value.

* Encrypted Token Pattern

After successful authentication, the server generates a unique Token comprised of the user's ID, a timestamp value and a nonce, using a unique key available only on the server. This Token is returned to the client and embedded in a hidden field.

* Protecting REST Services: Use of Custom Request Headers

Adding CSRF tokens, a double submit cookie and value, encrypted token, or other defense that involves changing the UI can frequently be complex or otherwise problematic. An alternate defense which is particularly well suited for AJAX endpoints is the use of a custom request header. This defense relies on the same-origin policy (SOP) restriction that only JavaScript can be used to add a custom header, and only within its origin. By default, browsers don't allow JavaScript to make cross origin requests.

A particularly attractive custom header and value to use is:

    X-Requested-With: XMLHttpRequest

* Alternate CSRF Defense: Require User Interaction

- Re-Authentication (password or stronger)
- One-time Token
- CAPTCHA

* Alternate CSRF Defense: SameSite cookie attribute

Currently, only *Chrome* based browsers supports this attribute.

    Set-Cookie: session=xxxxx; SameSite=Strict

    Set-Cookie: session=xxxxx; SameSite=Lax

* Workshop #29

- CSRF

* HTTP/2

* Decrease latency to improve page load speed in web browsers

- Data compression of HTTP headers
- HTTP/2 Server Push
- Pipelining of requests
- Fixing the head-of-line blocking problem in HTTP 1.x
- Multiplexing multiple requests over a single TCP connection

* Head-of-line blocking (HOL blocking)

A performance-limiting phenomenon that occurs when a line of packets is held up by the first packet.

- Switches
- Out-of-order delivery

* HOL - Switches

.image HOL_blocking.png

* Pipeline

.image HTTP_pipelining2.svg

* Server Push

.image serverpush.svg _ 900

* Multiplexing

.image http1-vs-http2-multiplexing.png _ 550

* gRPC

.image grpc.svg _ 750

* gRPC Service

    // The greeting service definition.
    service Greeter {
        // Sends a greeting
        rpc SayHello (HelloRequest) returns (HelloReply) {}
    }

    // The request message containing the user's name.
    message HelloRequest {
        string name = 1;
    }

    // The response message containing the greetings
    message HelloReply {
        string message = 1;
    }

* gRPC Message

    message Test1 {
        required int32 a = 1;
    }

Encoded Message

    08 96 01
