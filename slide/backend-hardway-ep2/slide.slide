Backend {Hard Way} Ep.2
https://github.com/acoshift/backend-hardway-ep2

Thanatat Tamtan

acoshift@gmail.com
@acoshift

* Table of contents

- Encoding
- Hashing
- Password Hashing
- Symmetric Encryption
- Asymmetric Encryption
- Signing
- Basic Authentication
- Session Token Authentication
- Signature Token Authentication
- Proxy
- Reverse Proxy
- Load Balancer

* Encoding

* Encoding

Encoder

    f(x) = y

Decoder

    f'(y) = x

* Example: Unicode <=> Hex

Unicode

    super_se  c   ret = ðŸ”¥

Hex

    73757065725f7365202063202020726574203d20f09f94a5

* Example: Binary <=> Hex

Binary (show in Unicode)

    ï¿½>rï¿½gï¿½ï¿½

Hex

    057590b23d67870317db0da7183e72ac

* Hex Encoding

Charset

    const char = "0123456789abcdef"

1 Byte => 2 Hex

    1001 1101 = 9d

    1001 1101 >> 4 = 1001 = 9
    1001 1101 & 0000 1111 = 1101 = d

.play encode.go /^func encode/,/^}/

* Hex Decoding

2 Hex => 1 Byte

.play decode.go /^func decode/,/^}/
.code decode.go /^func getByte/,/^}/

* Hashing

* Hashing

Hash function

    f(x) = y

But

    f'(y) = x

impossible (except Brute force :P)

* Checksum

.play checksum1.go /^func sum/,/^}/

* Checksum - djb2

.play checksum2.go /^func djb2/,/^}/

* Checksum - SHA1

.play checksum3.go /^func main/,/^}/

* Cryptographic Hash Function

* Cryptographic Hash Function

- Irreversible
- Small change, Big impact
- Need to be slow

* Irreversible

.play bcrypt1.go /^func main/,/^}/

* Small change, Big impact

.play bcrypt2.go /^func main/,/^}/

* Need to be slow

.play bcrypt3.go /^func main/,/^}/

* Encryption

* Benefits

- Authentication

    Can verify origin of message

- Integrity

    Can proof that message have not been changed

- Nonrepudiation

    Cannot deny sending message

* Types

- Symmetric
- Asymmetric

* Symmetric

    Plaintext => Encrypt Algorithm + Key => Ciphertext
    Ciphertext => Decrypt Algorithm + Key => Plaintext

.play encrypt1.go /START OMIT/,/END OMIT/

* Asymmetric

    Plaintext => Encrypt Algorithm + Public Key => Ciphertext
    Ciphertext => Decrypt Algorithm + Private Key => Plaintext

.play encrypt2.go /START OMIT/,/END OMIT/

* Digital Signature

* Digital Signature

Verify the authenticity of digital messages or documents

.play sign.go /START OMIT/,/END OMIT/

* Authentication

* Authentication

- Session
- Basic
- Digest
- Bearer Token

* Basic Authentication

    Authorization: Basic <credentials>

    credentials = base64(username:password)

Example

    credential = base64("root:toor") = "cm9vdDp0b29y"

    Authorization: Basic cm9vdDp0b29y

* Bearer Token

- Session Token
- Signature-based Token

* (Our) Gob Token

    token = base64(gob(data)).base64(signature)

.play gobtoken.go /START OMIT/,/END OMIT/

* JSON Web Token (JWT)

    token = base64(header).base64(payload).base64(signature)

    header = { "alg": "", "typ": "JWT" }
    payload = { ... }
    signature = alg(base64(header) + "." + base64(payload), secret)

* Proxy

* Reverse Proxy

* Load Balancer
